{
	"info": {
		"_postman_id": "9593a051-7e95-4173-b42a-e4ed93d5d159",
		"name": "HW8 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33523924"
	},
	"item": [
		{
			"name": "Create order (successful)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(10);\r",
							"    pm.expect(jsonData.orderId).to.eql(20);\r",
							"    pm.expect(jsonData.price).to.eql(30);\r",
							"    pm.expect(jsonData.errorMessage).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 10,\r\n  \"orderId\": 20,\r\n  \"price\": 30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orderservice/Order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check created payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment is created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(10);\r",
							"    pm.expect(jsonData.orderId).to.eql(20);\r",
							"    pm.expect(jsonData.price).to.eql(30);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 250);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/paymentservice/Payment?userId=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"paymentservice",
						"Payment"
					],
					"query": [
						{
							"key": "userId",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check created stock item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(10);\r",
							"    pm.expect(jsonData.orderId).to.eql(20);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/stockservice/Stock?userId=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"Stock"
					],
					"query": [
						{
							"key": "userId",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check created delivery item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delivery item is created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(10);\r",
							"    pm.expect(jsonData.orderId).to.eql(20);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/deliveryservice/Delivery?userId=10",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"deliveryservice",
						"Delivery"
					],
					"query": [
						{
							"key": "userId",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order (PaymentService error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is not created (PaymentService error)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(11);\r",
							"    pm.expect(jsonData.orderId).to.eql(21);\r",
							"    pm.expect(jsonData.price).to.eql(31);\r",
							"    pm.expect(jsonData.errorMessage).to.include(\"Error during creating a payment\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 11,\r\n  \"orderId\": 21,\r\n  \"price\": 31,\r\n  \"serviceError\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orderservice/Order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether payment is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 250);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/paymentservice/Payment?userId=11",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"paymentservice",
						"Payment"
					],
					"query": [
						{
							"key": "userId",
							"value": "11"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether stock item is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/stockservice/Stock?userId=11",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"Stock"
					],
					"query": [
						{
							"key": "userId",
							"value": "11"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether delivery item is removed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/deliveryservice/Delivery?userId=11",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"deliveryservice",
						"Delivery"
					],
					"query": [
						{
							"key": "userId",
							"value": "11"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order (StockService error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is not created (StockService error)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(12);\r",
							"    pm.expect(jsonData.orderId).to.eql(22);\r",
							"    pm.expect(jsonData.price).to.eql(32);\r",
							"    pm.expect(jsonData.errorMessage).to.include(\"Error during creating a stock\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 12,\r\n  \"orderId\": 22,\r\n  \"price\": 32,\r\n  \"serviceError\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orderservice/Order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether payment is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 250);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/paymentservice/Payment?userId=12",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"paymentservice",
						"Payment"
					],
					"query": [
						{
							"key": "userId",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether stock item is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/stockservice/Stock?userId=12",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"Stock"
					],
					"query": [
						{
							"key": "userId",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether delivery item is removed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/deliveryservice/Delivery?userId=12",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"deliveryservice",
						"Delivery"
					],
					"query": [
						{
							"key": "userId",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order (DeliveryService error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order is not created (StockService error)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eql(13);\r",
							"    pm.expect(jsonData.orderId).to.eql(23);\r",
							"    pm.expect(jsonData.price).to.eql(33);\r",
							"    pm.expect(jsonData.errorMessage).to.include(\"Error during creating a delivery\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 13,\r\n  \"orderId\": 23,\r\n  \"price\": 33,\r\n  \"serviceError\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orderservice/Order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"Order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether payment is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 250);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/paymentservice/Payment?userId=13",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"paymentservice",
						"Payment"
					],
					"query": [
						{
							"key": "userId",
							"value": "13"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether stock item is removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/stockservice/Stock?userId=13",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"Stock"
					],
					"query": [
						{
							"key": "userId",
							"value": "13"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check whether delivery item is removed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Stock item is removed\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/deliveryservice/Delivery?userId=13",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"deliveryservice",
						"Delivery"
					],
					"query": [
						{
							"key": "userId",
							"value": "13"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		}
	]
}